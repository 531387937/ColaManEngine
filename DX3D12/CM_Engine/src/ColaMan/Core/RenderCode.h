#pragma once

enum class FillMode
{
	WIREFRAME = 2, SOLID = 3
};

enum class CullMode
{
	None = 1, Front = 2, Back = 3
};

    enum class CONSERVATIVE_RASTERIZATION_MODE
    {
        CONSERVATIVE_RASTERIZATION_MODE_OFF = 1,
        CONSERVATIVE_RASTERIZATION_MODE_ON = 2
    };

enum class BlendMode
    {
        BLEND_ZERO = 1,
        BLEND_ONE = 2,
        BLEND_SRC_COLOR = 3,
        BLEND_INV_SRC_COLOR = 4,
        BLEND_SRC_ALPHA = 5,
        BLEND_INV_SRC_ALPHA = 6,
        BLEND_DEST_ALPHA = 7,
        BLEND_INV_DEST_ALPHA = 8,
        BLEND_DEST_COLOR = 9,
        BLEND_INV_DEST_COLOR = 10,
        BLEND_SRC_ALPHA_SAT = 11,
        BLEND_BLEND_FACTOR = 14,
        BLEND_INV_BLEND_FACTOR = 15,
        BLEND_SRC1_COLOR = 16,
        BLEND_INV_SRC1_COLOR = 17,
        BLEND_SRC1_ALPHA = 18,
        BLEND_INV_SRC1_ALPHA = 19
    };

enum class BLEND_OP
    {
        BLEND_OP_ADD = 1,
        BLEND_OP_SUBTRACT = 2,
        BLEND_OP_REV_SUBTRACT = 3,
        BLEND_OP_MIN = 4,
        BLEND_OP_MAX = 5
    };

 enum class LOGIC_OP
    {
        LOGIC_OP_CLEAR = 0,
        LOGIC_OP_SET = 1,
        LOGIC_OP_COPY = 2,
        LOGIC_OP_COPY_INVERTED = 3,
        LOGIC_OP_NOOP = 4,
        LOGIC_OP_INVERT = 5,
        LOGIC_OP_AND = 6,
        LOGIC_OP_NAND = 7,
        LOGIC_OP_OR = 8,
        LOGIC_OP_NOR = 9,
        LOGIC_OP_XOR = 10,
        LOGIC_OP_EQUIV = 11,
        LOGIC_OP_AND_REVERSE = 12,
        LOGIC_OP_AND_INVERTED = 13,
        LOGIC_OP_OR_REVERSE = 14,
        LOGIC_OP_OR_INVERTED = 15
    };


    enum class COLOR_WRITE_ENABLE
    {
       COLOR_WRITE_ENABLE_RED = 1,
       COLOR_WRITE_ENABLE_GREEN = 2,
       COLOR_WRITE_ENABLE_BLUE = 4,
       COLOR_WRITE_ENABLE_ALPHA = 8,
       COLOR_WRITE_ENABLE_ALL = (((COLOR_WRITE_ENABLE_RED | COLOR_WRITE_ENABLE_GREEN) | COLOR_WRITE_ENABLE_BLUE) |COLOR_WRITE_ENABLE_ALPHA)
    };


    enum class DEPTH_WRITE_MASK
    {
        DEPTH_WRITE_MASK_ZERO = 0,
        DEPTH_WRITE_MASK_ALL = 1
    };

    enum class COMPARISON_FUNC
    {
        COMPARISON_FUNC_NEVER = 1,
        COMPARISON_FUNC_LESS = 2,
        COMPARISON_FUNC_EQUAL = 3,
        COMPARISON_FUNC_LESS_EQUAL = 4,
        COMPARISON_FUNC_GREATER = 5,
        COMPARISON_FUNC_NOT_EQUAL = 6,
        COMPARISON_FUNC_GREATER_EQUAL = 7,
        COMPARISON_FUNC_ALWAYS = 8
    };

    enum class STENCIL_OP
    {
        STENCIL_OP_KEEP = 1,
        STENCIL_OP_ZERO = 2,
        STENCIL_OP_REPLACE = 3,
        STENCIL_OP_INCR_SAT = 4,
        STENCIL_OP_DECR_SAT = 5,
        STENCIL_OP_INVERT = 6,
        STENCIL_OP_INCR = 7,
        STENCIL_OP_DECR = 8
    };

    enum PRIMITIVE_TOPOLOGY_TYPE
    {
        PRIMITIVE_TOPOLOGY_TYPE_UNDEFINED = 0,
        PRIMITIVE_TOPOLOGY_TYPE_POINT = 1,
        PRIMITIVE_TOPOLOGY_TYPE_LINE = 2,
        PRIMITIVE_TOPOLOGY_TYPE_TRIANGLE = 3,
        PRIMITIVE_TOPOLOGY_TYPE_PATCH = 4
    };

    enum class PIPELINE_STATE_FLAGS
    {
        PIPELINE_STATE_FLAG_NONE = 0,
        PIPELINE_STATE_FLAG_TOOL_DEBUG = 0x1
    };

	enum class ROOT_PARAMETER_TYPE
	{
		ROOT_PARAMETER_TYPE_DESCRIPTOR_TABLE = 0,
		ROOT_PARAMETER_TYPE_32BIT_CONSTANTS = (ROOT_PARAMETER_TYPE_DESCRIPTOR_TABLE + 1),
		ROOT_PARAMETER_TYPE_CBV = (ROOT_PARAMETER_TYPE_32BIT_CONSTANTS + 1),
		ROOT_PARAMETER_TYPE_SRV = (ROOT_PARAMETER_TYPE_CBV + 1),
		ROOT_PARAMETER_TYPE_UAV = (ROOT_PARAMETER_TYPE_SRV + 1)
	};

	enum class SHADER_VISIBILITY
	{
		SHADER_VISIBILITY_ALL = 0,
		SHADER_VISIBILITY_VERTEX = 1,
		SHADER_VISIBILITY_HULL = 2,
		SHADER_VISIBILITY_DOMAIN = 3,
		SHADER_VISIBILITY_GEOMETRY = 4,
		SHADER_VISIBILITY_PIXEL = 5,
		SHADER_VISIBILITY_AMPLIFICATION = 6,
		SHADER_VISIBILITY_MESH = 7
	};

	enum class DESCRIPTOR_RANGE_TYPE
	{
		DESCRIPTOR_RANGE_TYPE_SRV = 0,
		DESCRIPTOR_RANGE_TYPE_UAV = (DESCRIPTOR_RANGE_TYPE_SRV + 1),
		DESCRIPTOR_RANGE_TYPE_CBV = (DESCRIPTOR_RANGE_TYPE_UAV + 1),
		DESCRIPTOR_RANGE_TYPE_SAMPLER = (DESCRIPTOR_RANGE_TYPE_CBV + 1)
	};

	enum class FILTER
	{
		FILTER_MIN_MAG_MIP_POINT = 0,
		FILTER_MIN_MAG_POINT_MIP_LINEAR = 0x1,
		FILTER_MIN_POINT_MAG_LINEAR_MIP_POINT = 0x4,
		FILTER_MIN_POINT_MAG_MIP_LINEAR = 0x5,
		FILTER_MIN_LINEAR_MAG_MIP_POINT = 0x10,
		FILTER_MIN_LINEAR_MAG_POINT_MIP_LINEAR = 0x11,
		FILTER_MIN_MAG_LINEAR_MIP_POINT = 0x14,
		FILTER_MIN_MAG_MIP_LINEAR = 0x15,
		FILTER_ANISOTROPIC = 0x55,
		FILTER_COMPARISON_MIN_MAG_MIP_POINT = 0x80,
		FILTER_COMPARISON_MIN_MAG_POINT_MIP_LINEAR = 0x81,
		FILTER_COMPARISON_MIN_POINT_MAG_LINEAR_MIP_POINT = 0x84,
		FILTER_COMPARISON_MIN_POINT_MAG_MIP_LINEAR = 0x85,
		FILTER_COMPARISON_MIN_LINEAR_MAG_MIP_POINT = 0x90,
		FILTER_COMPARISON_MIN_LINEAR_MAG_POINT_MIP_LINEAR = 0x91,
		FILTER_COMPARISON_MIN_MAG_LINEAR_MIP_POINT = 0x94,
		FILTER_COMPARISON_MIN_MAG_MIP_LINEAR = 0x95,
		FILTER_COMPARISON_ANISOTROPIC = 0xd5,
		FILTER_MINIMUM_MIN_MAG_MIP_POINT = 0x100,
		FILTER_MINIMUM_MIN_MAG_POINT_MIP_LINEAR = 0x101,
		FILTER_MINIMUM_MIN_POINT_MAG_LINEAR_MIP_POINT = 0x104,
		FILTER_MINIMUM_MIN_POINT_MAG_MIP_LINEAR = 0x105,
		FILTER_MINIMUM_MIN_LINEAR_MAG_MIP_POINT = 0x110,
		FILTER_MINIMUM_MIN_LINEAR_MAG_POINT_MIP_LINEAR = 0x111,
		FILTER_MINIMUM_MIN_MAG_LINEAR_MIP_POINT = 0x114,
		FILTER_MINIMUM_MIN_MAG_MIP_LINEAR = 0x115,
		FILTER_MINIMUM_ANISOTROPIC = 0x155,
		FILTER_MAXIMUM_MIN_MAG_MIP_POINT = 0x180,
		FILTER_MAXIMUM_MIN_MAG_POINT_MIP_LINEAR = 0x181,
		FILTER_MAXIMUM_MIN_POINT_MAG_LINEAR_MIP_POINT = 0x184,
		FILTER_MAXIMUM_MIN_POINT_MAG_MIP_LINEAR = 0x185,
		FILTER_MAXIMUM_MIN_LINEAR_MAG_MIP_POINT = 0x190,
		FILTER_MAXIMUM_MIN_LINEAR_MAG_POINT_MIP_LINEAR = 0x191,
		FILTER_MAXIMUM_MIN_MAG_LINEAR_MIP_POINT = 0x194,
		FILTER_MAXIMUM_MIN_MAG_MIP_LINEAR = 0x195,
		FILTER_MAXIMUM_ANISOTROPIC = 0x1d5
	};

	enum class TEXTURE_ADDRESS_MODE
	{
		TEXTURE_ADDRESS_MODE_WRAP = 1,
		TEXTURE_ADDRESS_MODE_MIRROR = 2,
		TEXTURE_ADDRESS_MODE_CLAMP = 3,
		TEXTURE_ADDRESS_MODE_BORDER = 4,
		TEXTURE_ADDRESS_MODE_MIRROR_ONCE = 5
	};

	enum class STATIC_BORDER_COLOR
	{
		STATIC_BORDER_COLOR_TRANSPARENT_BLACK = 0,
		STATIC_BORDER_COLOR_OPAQUE_BLACK = (STATIC_BORDER_COLOR_TRANSPARENT_BLACK + 1),
		STATIC_BORDER_COLOR_OPAQUE_WHITE = (STATIC_BORDER_COLOR_OPAQUE_BLACK + 1)
	};

	enum class ROOT_SIGNATURE_FLAGS
	{
		ROOT_SIGNATURE_FLAG_NONE = 0,
		ROOT_SIGNATURE_FLAG_ALLOW_INPUT_ASSEMBLER_INPUT_LAYOUT = 0x1,
		ROOT_SIGNATURE_FLAG_DENY_VERTEX_SHADER_ROOT_ACCESS = 0x2,
		ROOT_SIGNATURE_FLAG_DENY_HULL_SHADER_ROOT_ACCESS = 0x4,
		ROOT_SIGNATURE_FLAG_DENY_DOMAIN_SHADER_ROOT_ACCESS = 0x8,
		ROOT_SIGNATURE_FLAG_DENY_GEOMETRY_SHADER_ROOT_ACCESS = 0x10,
		ROOT_SIGNATURE_FLAG_DENY_PIXEL_SHADER_ROOT_ACCESS = 0x20,
		ROOT_SIGNATURE_FLAG_ALLOW_STREAM_OUTPUT = 0x40,
		ROOT_SIGNATURE_FLAG_LOCAL_ROOT_SIGNATURE = 0x80,
		ROOT_SIGNATURE_FLAG_DENY_AMPLIFICATION_SHADER_ROOT_ACCESS = 0x100,
		ROOT_SIGNATURE_FLAG_DENY_MESH_SHADER_ROOT_ACCESS = 0x200
	};

	enum class ShaderDataType
	{
		None = 0,
		Float, Float2, Float3, Float4, Mat2, Mat3, Mat4, Int, Int2, Int3, Int4, Bool
	};